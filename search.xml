<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redisson延迟队列实现原理：定时任务的时间是如何设置的？</title>
    <url>/2024/08/14/Redisson%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%EF%BC%9A%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%97%B6%E9%97%B4%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E7%9A%84%EF%BC%9F/</url>
    <content><![CDATA[<p>我们都知道<code>Redisson</code>延迟队列内部用到了定时任务，那么定时任务的时间间隔是如何设置的？是固定时间间隔吗？文章接下来简要介绍了<code>Redisson</code>延迟队列的原理，这是为了便于大家理解源码，通过分析<code>Redisson</code>延迟队列的源码后，相信大家会解开标题中的问题，对于<code>Redisson</code>延迟队列的实现原理也会有更深的理解。</p>
<h2 id="简要原理"><a href="#简要原理" class="headerlink" title="简要原理"></a>简要原理</h2><p><code>Redisson</code>的延迟队列主要基于<code>ZSET</code> + <code>LIST </code>+ 定时任务 +pub&#x2F;sub机制来实现，在<code>Redis</code>中一共有三个队列来实现此功能。</p>
<p><code>ZSET</code>：<code>timeout_queue</code>存放未过期的消息，<code>value</code>为消息内容，<code>score</code>为消息过期时间</p>
<p><code>LIST</code>有两个：<code>list0</code>按消息的投递顺序存放未过期的消息，<code>list1</code>存放过期的消息</p>
<p>定时任务：定时从<code>timeout_queue</code>中获取过期的数据，移动到<code>list1</code>中，并从<code>list1</code>和<code>timeout_queue</code>中删除</p>
<p>发布&#x2F;订阅机制：向<code>timeout_queue</code>中存入消息后，获取<code>timeout_queue</code>中的第一条消息是否和当前消息一样，如果一样，则将延迟任务的过期时间发布到<code>channel</code>，这样做是通知订阅者定时任务的时间需要改变</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>为方便大家理解先放一张方法之间的调用流程图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://ta0.oss-cn-beijing.aliyuncs.com/image-20240814224939984.png"
                      alt="image-20240814224939984"
                ></p>
<p>为了深入理解<code>RedissonDelayedQueue</code>的原理，我们需要了解<code>RedissonDelayedQueue</code>、<code>QueueTransferService</code>、<code>QueueTransferTask</code>这三个类。<code>RedissonDelayedQueue</code>这个类中比较重要的方法是其构造方法，其次是<code>RedissonDelayedQueue#offer()</code>。<code>RedissonDelayedQueue</code>的构造方法串联起了<code>QueueTransferService.schedule()</code>、<code>QueueTransferTask#start()</code>、<code>QueueTransferTask#scheduleTask()</code>、<code>QueueTransferTask#pushTask()</code>、<code>QueueTransferTask#pushTaskAsync()</code>等一系列方法，因此本文以<code>RedissonDelayedQueue</code>的构造方法为线索来分析<code>RedissonDelayedQueue</code>的原理</p>
<p>在进行源码分析之前，先对一些<code>RedissonDelayedQueue</code>中的一些变量做一下介绍：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 负责将过期消息从list0和timeout_queue转移到list1中</span><br><span class="line">private final QueueTransferService queueTransferService;</span><br><span class="line">// 当插入的消息是延迟队列中的第一条消息时，往此频道发布该消息的过期时间。Redisson订阅该频道，当有消息时就会更改定时任务的时间</span><br><span class="line">private final String channelName;</span><br><span class="line">// LIST类型，按消息的投递时间存放消息</span><br><span class="line">private final String queueName;</span><br><span class="line">// ZSET类型，存放未到期的消息</span><br><span class="line">private final String timeoutSetName;</span><br><span class="line">// LIST类型，存放过期的消息</span><br><span class="line">RedissonObject#name</span><br></pre></td></tr></table></figure></div>

<h3 id="RedissonDelayedQueue的构造方法"><a href="#RedissonDelayedQueue的构造方法" class="headerlink" title="RedissonDelayedQueue的构造方法"></a><code>RedissonDelayedQueue</code>的构造方法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected RedissonDelayedQueue(QueueTransferService queueTransferService, Codec codec, final CommandAsyncExecutor commandExecutor, String name) &#123;</span><br><span class="line">        super(codec, commandExecutor, name);</span><br><span class="line">        channelName = prefixName(&quot;redisson_delay_queue_channel&quot;, getName());</span><br><span class="line">        queueName = prefixName(&quot;redisson_delay_queue&quot;, getName());</span><br><span class="line">        timeoutSetName = prefixName(&quot;redisson_delay_queue_timeout&quot;, getName());</span><br><span class="line">        </span><br><span class="line">        QueueTransferTask task = new QueueTransferTask(commandExecutor.getConnectionManager()) &#123;</span><br><span class="line">            </span><br><span class="line">            @Override</span><br><span class="line">            protected RFuture&lt;Long&gt; pushTaskAsync() &#123;</span><br><span class="line">                return commandExecutor.evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_LONG,</span><br><span class="line">                        &quot;local expiredValues = redis.call(&#x27;zrangebyscore&#x27;, KEYS[2], 0, ARGV[1], &#x27;limit&#x27;, 0, ARGV[2]); &quot;</span><br><span class="line">                      + &quot;if #expiredValues &gt; 0 then &quot;</span><br><span class="line">                          + &quot;for i, v in ipairs(expiredValues) do &quot;</span><br><span class="line">                              + &quot;local randomId, value = struct.unpack(&#x27;dLc0&#x27;, v);&quot;</span><br><span class="line">                              + &quot;redis.call(&#x27;rpush&#x27;, KEYS[1], value);&quot;</span><br><span class="line">                              + &quot;redis.call(&#x27;lrem&#x27;, KEYS[3], 1, v);&quot;</span><br><span class="line">                          + &quot;end; &quot;</span><br><span class="line">                          + &quot;redis.call(&#x27;zrem&#x27;, KEYS[2], unpack(expiredValues));&quot;</span><br><span class="line">                      + &quot;end; &quot;</span><br><span class="line">                        // get startTime from scheduler queue head task</span><br><span class="line">                      + &quot;local v = redis.call(&#x27;zrange&#x27;, KEYS[2], 0, 0, &#x27;WITHSCORES&#x27;); &quot;</span><br><span class="line">                      + &quot;if v[1] ~= nil then &quot;</span><br><span class="line">                         + &quot;return v[2]; &quot;</span><br><span class="line">                      + &quot;end &quot;</span><br><span class="line">                      + &quot;return nil;&quot;,</span><br><span class="line">                      Arrays.&lt;Object&gt;asList(getName(), timeoutSetName, queueName), //KEYS</span><br><span class="line">                      System.currentTimeMillis(), 100); // ARGV</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            @Override</span><br><span class="line">            protected RTopic getTopic() &#123;</span><br><span class="line">                return new RedissonTopic(LongCodec.INSTANCE, commandExecutor, channelName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        queueTransferService.schedule(queueName, task);</span><br><span class="line">        </span><br><span class="line">        this.queueTransferService = queueTransferService;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>构造方法主要做了下面三件事：</p>
<ol>
<li><p>初始化<code>RedissonDelayedQueue</code>中的变量</p>
</li>
<li><p>创建了<code>QueueTransferTask</code>类并重写了<code>pushTaskAsync()</code>和<code>getTopic()</code>方法</p>
</li>
<li><p>调用<code>QueueTransferService#schedule()</code>方法调度刚刚创建的<code>task</code></p>
</li>
</ol>
<p>这里我们先看下重写的<code>QueueTransferTask#pushTaskAsync()</code>干了些什么，关于类<code>QueueTransferService</code>和<code>QueueTransferTask</code>，光看类名就能猜到这二者有一定的关联，我们下文介绍。</p>
<p><code>pushTaskAsync()</code>这个方法使用命令执行器执行了一段<code>Lua</code>脚本，这段<code>Lua</code>脚本的逻辑是这样的：</p>
<ol>
<li><p>从<code>timeout_queue</code>中获取<code>score</code>值为<code>0</code> -<code> currentTimeMillis</code>之间的元素，限制100个，如果返回有数据，那么将这些数据添加到<code>list1</code>中，并从<code>list0</code>中删除，最后从<code>timeout_queue</code>中删除。</p>
</li>
<li><p>查看<code>timeout_queue</code>中的首个元素，如果有，那么将其过期时间返回，否则返回<code>nil</code>。</p>
</li>
</ol>
<p><strong>其实第一点中的内容也就是我们上述的定时任务中的逻辑，那么定时任务在哪里开启呢？定时任务的时间又是如何设置的呢？</strong>接下来我们就要看<code>QueueTransferService</code>和<code>QueueTransferTask</code>这两个类了。</p>
<h3 id="QueueTransferService"><a href="#QueueTransferService" class="headerlink" title="QueueTransferService"></a><code>QueueTransferService</code></h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class QueueTransferService &#123;</span><br><span class="line"></span><br><span class="line">    private final ConcurrentMap&lt;String, QueueTransferTask&gt; tasks = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    public synchronized void schedule(String name, QueueTransferTask task) &#123;</span><br><span class="line">        QueueTransferTask oldTask = tasks.putIfAbsent(name, task);</span><br><span class="line">        if (oldTask == null) &#123;</span><br><span class="line">            task.start();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            oldTask.incUsage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public synchronized void remove(String name) &#123;</span><br><span class="line">        QueueTransferTask task = tasks.get(name);</span><br><span class="line">        if (task != null) &#123;</span><br><span class="line">            if (task.decUsage() == 0) &#123;</span><br><span class="line">                tasks.remove(name, task);</span><br><span class="line">                task.stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这段源码不难理解，<code>QueueTransferService</code>中维护了一个<code>Map</code>，<code>schedule()</code>方法根据队列名获取到对应的<code>QueueTransferTask</code>并启动，如果已存在，代表着这个<code>task</code>已经启动，就不会再启动了，只会增加其使用次数。<code>QueueTransferTask#start()</code>方法在<code>QueueTransferService</code>中被调用，因此我们从这个方法开始看。</p>
<h3 id="QueueTransferTask-start"><a href="#QueueTransferTask-start" class="headerlink" title="QueueTransferTask#start()"></a><code>QueueTransferTask#start()</code></h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void start() &#123;</span><br><span class="line">        RTopic schedulerTopic = getTopic();</span><br><span class="line">        statusListenerId = schedulerTopic.addListener(new BaseStatusListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(String channel) &#123;</span><br><span class="line">                pushTask();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        messageListenerId = schedulerTopic.addListener(Long.class, new MessageListener&lt;Long&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onMessage(CharSequence channel, Long startTime) &#123;</span><br><span class="line">                scheduleTask(startTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p><code>QueueTransferTask#start()</code>方法中的代码比较简单，就做了两件事：</p>
<p>1.获取到<code>RTopic</code></p>
<p>2.为<code>topic</code>添加订阅事件和消息事件监听器，分别会调用<code>pushTask()</code>和<code>scheduleTask()</code>这两个方法</p>
<p>接下来看<code>scheduleTask()</code>方法</p>
<h3 id="QueueTransferTask-scheduleTask"><a href="#QueueTransferTask-scheduleTask" class="headerlink" title="QueueTransferTask#scheduleTask()"></a><code>QueueTransferTask#scheduleTask()</code></h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 保存了正在执行的TimeoutTask</span><br><span class="line">private final AtomicReference&lt;TimeoutTask&gt; lastTimeout = new AtomicReference&lt;TimeoutTask&gt;();</span><br><span class="line"></span><br><span class="line">private void scheduleTask(final Long startTime) &#123;</span><br><span class="line">    TimeoutTask oldTimeout = lastTimeout.get();</span><br><span class="line">    if (startTime == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (oldTimeout != null) &#123;</span><br><span class="line">        oldTimeout.getTask().cancel();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    long delay = startTime - System.currentTimeMillis();</span><br><span class="line">    if (delay &gt; 10) &#123;</span><br><span class="line">        Timeout timeout = connectionManager.newTimeout(new TimerTask() &#123;                    </span><br><span class="line">            @Override</span><br><span class="line">            public void run(Timeout timeout) throws Exception &#123;</span><br><span class="line">                pushTask();</span><br><span class="line">                </span><br><span class="line">                TimeoutTask currentTimeout = lastTimeout.get();</span><br><span class="line">                if (currentTimeout.getTask() == timeout) &#123;</span><br><span class="line">                    lastTimeout.compareAndSet(currentTimeout, null);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, delay, TimeUnit.MILLISECONDS);</span><br><span class="line">        if (!lastTimeout.compareAndSet(oldTimeout, new TimeoutTask(startTime, timeout))) &#123;</span><br><span class="line">            timeout.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        pushTask();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>startTime</code>是<code>timeout_queue</code>中首个元素的过期时间，这段方法的主要逻辑是这样的：</p>
<ol>
<li><p>如果有正在执行的<code>TimeoutTask</code>，则取消这个定时任务</p>
</li>
<li><p>获取到过期时间到现在时间的差值，如果大于10，则创建一个定时任务，定时任务到期后就会执行 <code>pushTask()</code>，然后将这个定时任务<code>CAS</code>设置为<code>lastTimeout</code>，如果设置不成功，说明又收到了消息并且已经更新了<code>lastTimeout</code>，需要将刚创建的定时任务取消。</p>
</li>
<li><p>如果过期时间小于10，执行 <code>pushTask()</code></p>
</li>
</ol>
<p>接下来看<code>pushTask()</code>方法</p>
<h3 id="QueueTransferTask-pushTask"><a href="#QueueTransferTask-pushTask" class="headerlink" title="QueueTransferTask#pushTask()"></a><code>QueueTransferTask#pushTask()</code></h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">private void pushTask() &#123;</span><br><span class="line">    RFuture&lt;Long&gt; startTimeFuture = pushTaskAsync();</span><br><span class="line">    startTimeFuture.onComplete((res, e) -&gt; &#123;</span><br><span class="line">        if (e != null) &#123;</span><br><span class="line">            if (e instanceof RedissonShutdownException) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">            scheduleTask(System.currentTimeMillis() + 5 * 1000L);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if (res != null) &#123;</span><br><span class="line">            scheduleTask(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>总结一下这个方法：</p>
<ol>
<li><p>这个方法其实就是执行了<code>pushTaskAsync()</code>方法，这个方法还眼熟吗？在<code>RedissonDelayedQueue</code>的构造方法中创建<code>QueueTransferTask</code>时这个方法被重写，具体逻辑可以看上文回顾一下</p>
</li>
<li><p>如果出现异常，执行<code>scheduleTask(System.currentTimeMillis() + 5 * 1000L);</code>，而<code>scheduleTask()</code>方法我们已经看过，即创建定时任务执行<code>pushTask()</code>，那么这一行代码的意思也就是<code>5s</code>后重新执行<code>pushTask()</code></p>
</li>
<li><p>如果没有问题，则将res传入 <code>scheduleTask();</code>这里有个问题，res是什么呢？这个就要追溯到<code>pushTaskAsync()</code>方法了，上文我们分析过，如果<code>timeout_queue</code>中还有元素的话，会返回第一个元素的过期时间，没有则返回<code>null</code></p>
</li>
</ol>
<p>至此，<code>RedissonDelayedQueue</code>的构造方法所引出的一系列方法，我们就都看完了，可以发现，这些方法都是有关定时任务的，可能到这里大家还是有些懵懵的，没事，看完<code>RedissonDelayedQueue</code>的最后两块拼图<code>RedissonDelayedQueue#offer()</code>方法和<code>Redisson#take()</code>方法，相信你就会柳暗花明。</p>
<h3 id="RedissonDelayedQueue-offer"><a href="#RedissonDelayedQueue-offer" class="headerlink" title="RedissonDelayedQueue#offer()"></a><code>RedissonDelayedQueue#offer()</code></h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void offer(V e, long delay, TimeUnit timeUnit) &#123;</span><br><span class="line">    get(offerAsync(e, delay, timeUnit));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>RedissonDelayedQueue#offer()</code>本质上是调用了<code>RedissonDelayedQueue#offerAsync()</code>，只不过后者方法返回的是一个<code>Future</code>对象，前者调用了后者返回结果的<code>get()</code>方法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public RFuture&lt;Void&gt; offerAsync(V e, long delay, TimeUnit timeUnit) &#123;</span><br><span class="line">    if (delay &lt; 0) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Delay can&#x27;t be negative&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    long delayInMs = timeUnit.toMillis(delay);</span><br><span class="line">    long timeout = System.currentTimeMillis() + delayInMs;</span><br><span class="line"> </span><br><span class="line">    long randomId = ThreadLocalRandom.current().nextLong();</span><br><span class="line">    return commandExecutor.evalWriteAsync(getName(), codec, RedisCommands.EVAL_VOID,</span><br><span class="line">            &quot;local value = struct.pack(&#x27;dLc0&#x27;, tonumber(ARGV[2]), string.len(ARGV[3]), ARGV[3]);&quot; </span><br><span class="line">          + &quot;redis.call(&#x27;zadd&#x27;, KEYS[2], ARGV[1], value);&quot;</span><br><span class="line">          + &quot;redis.call(&#x27;rpush&#x27;, KEYS[3], value);&quot;</span><br><span class="line">          // if new object added to queue head when publish its startTime </span><br><span class="line">          // to all scheduler workers </span><br><span class="line">          + &quot;local v = redis.call(&#x27;zrange&#x27;, KEYS[2], 0, 0); &quot;</span><br><span class="line">          + &quot;if v[1] == value then &quot;</span><br><span class="line">             + &quot;redis.call(&#x27;publish&#x27;, KEYS[4], ARGV[1]); &quot;</span><br><span class="line">          + &quot;end;&quot;,</span><br><span class="line">          Arrays.&lt;Object&gt;asList(getName(), timeoutSetName, queueName, channelName), </span><br><span class="line">          timeout, randomId, encode(e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其实<code>offerAsync()</code>方法的源码比较简单，主要是理解这段<code>Lua</code>代码：</p>
<p>1.向<code>list0</code>和<code>timeout_queue</code>存入消息</p>
<p>2.存入之后查看<code>timeout_queue</code>的第一个消息是否是刚刚插入的消息，如果是，则向<code>channel</code>中发布这条消息的过期时间。上面我们看<code>QueueTransferTask#start()</code>方法时知道这个方法内部为Topic添加了消息监听器，这里向channel发送了首条消息的过期时间，那么<code>Topic</code>对应的消息监听器监听到这个消息就会执行<code>QueueTransferTask#scheduleTask()</code>方法更改定时器时间。</p>
<p><strong>为什么存入的消息是第一条就要向<code>channel</code>中发布这条消息的过期时间？或者说为什么<code>Redisson</code>实现延迟队列为什么要使用发布订阅&#x2F;机制？</strong></p>
<p>我们先来看一下<code>QueueTransferTask#scheduleTask()</code>的参数可能来自什么途径：</p>
<ol>
<li><p><code>QueueTransferTask#pushTaskAsync()</code>执行完之后返回<code>timeout_queue</code>中首条消息的过期时间</p>
</li>
<li><p><code>RedissonDelayedQueue#offerAsync()</code>执行时如果插入的消息是<code>timeout_queue</code>的首条消息发布出去的过期时间</p>
</li>
</ol>
<p>假设上述1正常执行返回了<code>timeout_queue</code>中首条消息的过期时间<code>T1</code>，<code>QueueTransferTask#scheduleTask()</code>创建了定时时间为<code>T1</code>的定时任务，此时时间小于<code>T</code>且<code>timeout_queue</code>进来一条消息<code>m</code>，其过期时间<code>T2</code> &lt; <code>T1</code>，成为了<code>timeout_queue</code>中的第一条消息，如果此时不更改定时任务的时间，则会导致<code>m</code>的消费被延迟。</p>
<p>最后就是<code>RedissonBlockingDeque#take()</code>方法了，这个方法源码比较简单，其实执行的是<code>BLPOP list1 0</code>，从<code>list1</code>左侧一直阻塞获取直到获取到一条数据。</p>
<h2 id="标题中的问题"><a href="#标题中的问题" class="headerlink" title="标题中的问题"></a>标题中的问题</h2><p>通过源码的分析，我们知道定时任务的时间在<code>QueueTransferTask#scheduleTask()</code>中设置，我们又知道<code>QueueTransferTask#scheduleTask()</code>的参数始终是<code>timeout_queue</code>中首个元素的过期时间，所以这个定时任务的定时时间也始终<code>timeout_queue</code>中首个元素的过期时间。</p>
]]></content>
      <tags>
        <tag>Redisson</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Go HTTP框架Hertz实现JWT认证</title>
    <url>/2023/02/03/%E4%BD%BF%E7%94%A8Go-HTTP%E6%A1%86%E6%9E%B6Hertz%E5%AE%9E%E7%8E%B0JWT%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<blockquote>
<p>最近在做一个图书管理系统的前端项目，登录后可以进行借书、还书等一系列操作，未登录时进行这些操作会跳转到注册和登录界面，实现这个操作的关键是判断用户是否登录，那么后端应该如何来判断呢？虽然在这个项目中，这并不是我需要考虑的问题，但在我参加的另一个后端项目中，我和另一位学长负责做登录与注册的接口，于是我的疑惑解开了</p>
</blockquote>
<h2 id="JWT认证"><a href="#JWT认证" class="headerlink" title="JWT认证"></a>JWT认证</h2><h3 id="JWT认证简介"><a href="#JWT认证简介" class="headerlink" title="JWT认证简介"></a>JWT认证简介</h3><p>JSON Web Token（JWT）是一个开放的标准（RFC 7519），它定义了一个紧凑且自包含的方式，用于在各方之间作为JSON对象安全地传输信息。由于此信息是经过数字签名的，因此可以被验证和信任。</p>
<h3 id="JWT令牌结构"><a href="#JWT令牌结构" class="headerlink" title="JWT令牌结构"></a>JWT令牌结构</h3><p>令牌结构由三部分组成，Header.Payload.Signature</p>
<h4 id="标头-Header"><a href="#标头-Header" class="headerlink" title="标头(Header)"></a>标头(Header)</h4><p>通常由两部分组成，令牌的类型（JWT）与所使用的签名算法（例如HMAC SHA256）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;alg&quot;:&quot;HS256&quot;,</span><br><span class="line">	&quot;typ&quot;:&quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这一部分会被Base64Url编码为JWT的第一部分，可以通过<a class="link"   href="https://jwt.io/" >JWT官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>来查看这一部分被编码后的效果:</p>
<p><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code></p>
<h4 id="载荷-Payload"><a href="#载荷-Payload" class="headerlink" title="载荷(Payload)"></a>载荷(Payload)</h4><p>载荷部分一般会存放一些有效信息，比如用户的信息等，但不能存放敏感信息，比如用户密码等，因为Base64是对称解密的，在客户端就可以拿到该部分内容</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;iss&quot;:&quot;zyta0&quot;,</span><br><span class="line">	&quot;name&quot;:&quot;zyta0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>同样，这一部分也会被Base64Url编码，成为JWT的第二部分，通过<a class="link"   href="https://jwt.io/" >JWT官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>来查看这部分被编码后的效果:</p>
<p><code>eyJpc3MiOiJ6eXRhMCIsIm5hbWUiOiJ6eXRhMCJ9</code></p>
<h4 id="签名-Signature"><a href="#签名-Signature" class="headerlink" title="签名(Signature)"></a>签名(Signature)</h4><p>签名部分需要经过Base64Url编码的Header和Payload部分，秘钥，签名算法来完成签名。下面便是以key为秘钥，HS256为签名算法的例子:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload), </span><br><span class="line">  key</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<p>签名后的效果：</p>
<p><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6eXRhMCIsIm5hbWUiOiJ6eXRhMCJ9.jgDhUTbmOHwpnnr_J9kEzVUzSsSAp7_rLR-koJqoW6U</code></p>
<h5 id="签名的目的"><a href="#签名的目的" class="headerlink" title="签名的目的"></a>签名的目的</h5><p>防止Header和Payload部分的信息被篡改。通过对Header和Payload解码后篡改数据，然后进行编码，这时可以使用原来的签名，也可以生成新的签名，这两种做法都是行不通的。使用原来的签名，则在服务端验证时，发现该签名与Header和Payload不匹配，无法通过验证；通过生成新的签名更是不可能，除非拿到服务端的秘钥，否则得出来的签名无法通过验证</p>
<h3 id="JWT认证流程"><a href="#JWT认证流程" class="headerlink" title="JWT认证流程"></a>JWT认证流程</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://ta0.oss-cn-beijing.aliyuncs.com/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png"
                      alt="未命名文件"
                ></p>
<ul>
<li>客户端发送登录请求后，服务端拿到登录的账号密码去数据库中校验账号密码正确性，正确则生成token并返回，否则登录失败</li>
<li>再次请求时携带token，服务端拿到token后校验token是否被篡改，校验token是否过期，token过期则返回token过期提示</li>
<li>客户端收到token过期提示则携带refresh_token重新请求，若refresh_token未过期则返回新的token和refresh_token；若refresh_token已过期则重新登陆</li>
<li>token校验无误则返回请求资源</li>
</ul>
<p><strong>有了JWT认证，我们引言部分的难题便解开了，后端可以通过前端请求是否携带token来判断用户是否登录，从而给予其访问其他功能的权限</strong></p>
<h2 id="Hertz-JWT"><a href="#Hertz-JWT" class="headerlink" title="Hertz-JWT"></a>Hertz-JWT</h2><p>基本的配置可以参考<a class="link"   href="https://www.cloudwego.io/zh/docs/hertz/tutorials/basic-feature/middleware/jwt/" >官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>由于首次接触JWT认证，官方文档给出的内容阅读起来有点困难，况且我不懂它是怎么实现的，带着疑惑我去读了例子的源码和库中的部分代码，这里通过分析<a class="link"   href="https://github.com/cloudwego/hertz-examples/tree/main/bizdemo/hertz_jwt" >官方给出例子的源码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>来介绍Hertz中JWT的使用</p>
<h3 id="Demo结构"><a href="#Demo结构" class="headerlink" title="Demo结构"></a>Demo结构</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hertz_jwt</span><br><span class="line">├── biz</span><br><span class="line">│   ├── dal</span><br><span class="line">│   │   ├── init.go </span><br><span class="line">│   │   └── mysql</span><br><span class="line">│   │       ├── init.go         // 连接数据库</span><br><span class="line">│   │       └── user.go         // 注册用户、校验用户、查询用户</span><br><span class="line">│   ├── handler                 //处理路由请求</span><br><span class="line">│   │   ├── ping.go</span><br><span class="line">│   │   └── register.go         </span><br><span class="line">│   ├── model</span><br><span class="line">│   │   ├── sql                 //用于初始化表</span><br><span class="line">│   │   │   └── user.sql</span><br><span class="line">│   │   └── user.go             //定义结构体与数据库中的表对应</span><br><span class="line">│   ├── mw</span><br><span class="line">│   │   └── jwt.go              //配置hertz-jwt中间件</span><br><span class="line">│   ├── router</span><br><span class="line">│   │   └── register.go</span><br><span class="line">│   └── utils</span><br><span class="line">│       └── md5.go              // 对密码进行md5加密</span><br><span class="line">├── docker-compose.yml </span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── main.go # hertz 服务入口</span><br><span class="line">├── readme.md</span><br><span class="line">├── router.go # 路由注册</span><br><span class="line">└── router_gen.go</span><br></pre></td></tr></table></figure></div>

<h3 id="hertz-jwt-main-go"><a href="#hertz-jwt-main-go" class="headerlink" title="hertz_jwt&#x2F;main.go"></a>hertz_jwt&#x2F;main.go</h3><p>程序的入口文件，进行了 数据库连接 &#x3D;&gt; JWT中间件初始化 &#x3D;&gt; 注册路由，启动服务</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">	//dal.Init()函数来自于文件dal/init.go，查看该文件，发现是对mysql.Init()的调用，该函数执行的是数据库的连接操作</span><br><span class="line">	dal.Init()                   </span><br><span class="line">    //jwt中间件的初始化</span><br><span class="line">    mw.InitJwt()</span><br><span class="line">	h := server.Default()</span><br><span class="line">	register(h)</span><br><span class="line">	h.Spin()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="hertz-jwt-router-go"><a href="#hertz-jwt-router-go" class="headerlink" title="hertz_jwt&#x2F;router.go"></a>hertz_jwt&#x2F;router.go</h3><p>在这个文件中可以看到所有注册的路由，以此为线索，我们去分别查看不同路由对应的处理逻辑</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">func customizedRegister(r *server.Hertz) &#123;</span><br><span class="line">	r.POST(&quot;/register&quot;, handler.Register)</span><br><span class="line">	r.POST(&quot;/login&quot;, mw.JwtMiddleware.LoginHandler)</span><br><span class="line">	auth := r.Group(&quot;/auth&quot;, mw.JwtMiddleware.MiddlewareFunc())</span><br><span class="line">	auth.GET(&quot;/ping&quot;, handler.Ping)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到一共注册了三个路由，一个路由组auth，括号中是路由对应的处理函数。</p>
<p>第一个路由是注册路由，与我们今天的主题无关；</p>
<p>第二个路由是登录路由，登陆成功后会返回token；</p>
<p>第三个路由是ping请求，但其所在的路由组auth被注入了JWT中间件授权逻辑，意味着只有完成JWT的认证才授权访问该路由</p>
<h3 id="github-com-hertz-contrib-x6a-119-116-x40-118-x31-x2e-48-46-48-auth-jwt-go"><a href="#github-com-hertz-contrib-x6a-119-116-x40-118-x31-x2e-48-46-48-auth-jwt-go" class="headerlink" title="github.com\hertz-contrib\&#x6a;&#119;&#116;&#x40;&#118;&#x31;&#x2e;&#48;&#46;&#48;\auth_jwt.go"></a>github.com\hertz-contrib\<a class="link"   href="mailto:&#x6a;&#119;&#116;&#x40;&#118;&#x31;&#x2e;&#48;&#46;&#48;" >&#x6a;&#119;&#116;&#x40;&#118;&#x31;&#x2e;&#48;&#46;&#48; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>\auth_jwt.go</h3><p>该文件是Hertz-JWT库中的文件，里边实现了 <code>HertzJWTMiddleware </code>类型的方法<code>LoginHandler</code></p>
<p>从router&#x2F;go文件中可以看出，登录路由正是调用了该方法来处理登录请求的，那么有人会问，既然这是库中就已经定义好的，那我们直接调用就好了，然而，现在并不能调用该方法，因为该方法是<code>HertzJWTMiddleware</code>类型的方法，在我们的文件中要先初始化一个该类型的变量，才能调用该方法。接下来我们来看如何初始化该类型</p>
<h3 id="hertz-jwt-mw-jwt-go"><a href="#hertz-jwt-mw-jwt-go" class="headerlink" title="hertz_jwt&#x2F;mw&#x2F;jwt.go"></a>hertz_jwt&#x2F;mw&#x2F;jwt.go</h3><p>该文件中初始化了一个<code>HertzJWTMiddleware</code>类型，我在该代码中做了相应的注释</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">func InitJwt() &#123;</span><br><span class="line">	var err error</span><br><span class="line">	JwtMiddleware, err = jwt.New(&amp;jwt.HertzJWTMiddleware&#123;</span><br><span class="line">		Realm:       &quot;test zone&quot;,</span><br><span class="line">		Key:         []byte(&quot;secret key&quot;),</span><br><span class="line">		Timeout:     time.Hour,</span><br><span class="line">		MaxRefresh:  time.Hour,</span><br><span class="line">		TokenLookup: &quot;header: Authorization, query: token, cookie: jwt&quot;,</span><br><span class="line">		//设置从header中获取token的前缀</span><br><span class="line">		TokenHeadName: &quot;Bearer&quot;,</span><br><span class="line">		//设置登录成功的响应函数</span><br><span class="line">		LoginResponse: func(ctx context.Context, c *app.RequestContext, code int, token string, expire time.Time) &#123;</span><br><span class="line">			c.JSON(http.StatusOK, utils.H&#123;</span><br><span class="line">				&quot;code&quot;:    code,</span><br><span class="line">				&quot;token&quot;:   token,</span><br><span class="line">				&quot;expire&quot;:  expire.Format(time.RFC3339),</span><br><span class="line">				&quot;message&quot;: &quot;success&quot;,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;,</span><br><span class="line">		//用户的认证函数   参数绑定 =&gt; 去数据库中对比用户的账号密码</span><br><span class="line">		Authenticator: func(ctx context.Context, c *app.RequestContext) (interface&#123;&#125;, error) &#123;</span><br><span class="line">			var loginStruct struct &#123;</span><br><span class="line">				Account  string `form:&quot;account&quot; json:&quot;account&quot; query:&quot;account&quot; vd:&quot;(len($) &gt; 0 &amp;&amp; len($) &lt; 30); msg:&#x27;Illegal format&#x27;&quot;`</span><br><span class="line">				Password string `form:&quot;password&quot; json:&quot;password&quot; query:&quot;password&quot; vd:&quot;(len($) &gt; 0 &amp;&amp; len($) &lt; 30); msg:&#x27;Illegal format&#x27;&quot;`</span><br><span class="line">			&#125;</span><br><span class="line">			if err := c.BindAndValidate(&amp;loginStruct); err != nil &#123;</span><br><span class="line">				return nil, err</span><br><span class="line">			&#125;</span><br><span class="line">			users, err := mysql.CheckUser(loginStruct.Account, utils2.MD5(loginStruct.Password))</span><br><span class="line">			if err != nil &#123;</span><br><span class="line">				return nil, err</span><br><span class="line">			&#125;</span><br><span class="line">			if len(users) == 0 &#123;</span><br><span class="line">				return nil, errors.New(&quot;user already exists or wrong password&quot;)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			return users[0], nil</span><br><span class="line">		&#125;,</span><br><span class="line">		IdentityKey: IdentityKey,</span><br><span class="line">		IdentityHandler: func(ctx context.Context, c *app.RequestContext) interface&#123;&#125; &#123;</span><br><span class="line">			claims := jwt.ExtractClaims(ctx, c)</span><br><span class="line">			return &amp;model.User&#123;</span><br><span class="line">				UserName: claims[IdentityKey].(string),</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		//用于为生成token提供负载</span><br><span class="line">		PayloadFunc: func(data interface&#123;&#125;) jwt.MapClaims &#123;</span><br><span class="line">			if v, ok := data.(*model.User); ok &#123;</span><br><span class="line">				return jwt.MapClaims&#123;</span><br><span class="line">					IdentityKey: v.UserName,</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			return jwt.MapClaims&#123;&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		//返回服务端信息</span><br><span class="line">		HTTPStatusMessageFunc: func(e error, ctx context.Context, c *app.RequestContext) string &#123;</span><br><span class="line">			hlog.CtxErrorf(ctx, &quot;jwt biz err = %+v&quot;, e.Error())</span><br><span class="line">			return e.Error()</span><br><span class="line">		&#125;,</span><br><span class="line">		//认证未通过的处理函数</span><br><span class="line">		Unauthorized: func(ctx context.Context, c *app.RequestContext, code int, message string) &#123;</span><br><span class="line">			c.JSON(http.StatusOK, utils.H&#123;</span><br><span class="line">				&quot;code&quot;:    code,</span><br><span class="line">				&quot;message&quot;: message,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		panic(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>该部分首先初始化了一个<code>HertzJWTMiddleware</code>类型的变量：<code>JwtMiddleware</code></p>
<p>在初始化该变量时可以看到有很多字段，在官方文档中可以查看该字段代表什么，这里不做赘述。</p>
<p>在上面初始化变量时可以看到很多字段都有相对应的函数，那么大家有没有疑惑：这些函数在什么时候 哪个地方执行呢？</p>
<p>这时候又要回到github.com\hertz-contrib\<a class="link"   href="mailto:&#x6a;&#x77;&#x74;&#x40;&#x76;&#49;&#x2e;&#x30;&#46;&#48;" >&#x6a;&#x77;&#x74;&#x40;&#x76;&#49;&#x2e;&#x30;&#46;&#48; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>\auth_jwt.go文件中<code>LoginHandler</code>方法了</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (mw *HertzJWTMiddleware) LoginHandler(ctx context.Context, c *app.RequestContext) &#123;</span><br><span class="line">	//查看是否定义了该函数，若没定义，调用认证未通过的函数，给客户端返回信息，表明服务端错误</span><br><span class="line">	if mw.Authenticator == nil &#123;</span><br><span class="line">		mw.unauthorized(ctx, c, http.StatusInternalServerError,</span><br><span class="line">		mw.HTTPStatusMessageFunc(ErrMissingAuthenticatorFunc, ctx, c))</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line">	//认证通过后，拿到用户的信息，作为token的payload部分</span><br><span class="line">	data, err := mw.Authenticator(ctx, c)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		mw.unauthorized(ctx, c, http.StatusUnauthorized, mw.HTTPStatusMessageFunc(err, ctx, c))</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// Create the token</span><br><span class="line">	token := jwt.New(jwt.GetSigningMethod(mw.SigningAlgorithm))</span><br><span class="line">	claims := token.Claims.(jwt.MapClaims)</span><br><span class="line">	//将认证通过时返回的用户数据作为token的负载</span><br><span class="line">	if mw.PayloadFunc != nil &#123;</span><br><span class="line">		for key, value := range mw.PayloadFunc(data) &#123;</span><br><span class="line">			claims[key] = value</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	expire := mw.TimeFunc().Add(mw.Timeout)</span><br><span class="line">	claims[&quot;exp&quot;] = expire.Unix()</span><br><span class="line">	claims[&quot;orig_iat&quot;] = mw.TimeFunc().Unix()</span><br><span class="line">	//完成签名</span><br><span class="line">	tokenString, err := mw.signedString(token)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		mw.unauthorized(ctx, c, http.StatusUnauthorized, mw.HTTPStatusMessageFunc(ErrFailedTokenCreation, ctx, c))</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	mw.LoginResponse(ctx, c, http.StatusOK, tokenString, expire)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>从该方法中可以看到，我们在初始化变量<code>JwtMiddleware</code>时定义的方法，都被调用在该方法中了</p>
<p>该方法的大致逻辑是：</p>
<ul>
<li><p>调用<code>JwtMiddleware</code>中的<code>Authenticator</code>方法，验证是否存在该用户以及用户的密码是否正确</p>
</li>
<li><p>验证通过后，将该用户的用户名(可以查看<code>Payloadfunc</code>方法)添加到token的Payload部分</p>
</li>
<li><p>将其他参数添加到token的Payload部分</p>
</li>
<li><p>完成签名，调用<code>JwtMiddleware</code>的登录成功方法：<code>LoginResponse</code></p>
</li>
</ul>
<hr>
<p>至此，JWT的认证部分我们就讲完了，但是JWT的核心为<strong>认证</strong>和<strong>授权</strong>，我们接下来来看看，如何为带有token的请求开放访问权限</p>
<h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>可以看到在hertz_jwt&#x2F;router.go文件中，有这样两行代码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">auth := r.Group(&quot;/auth&quot;, mw.JwtMiddleware.MiddlewareFunc())</span><br><span class="line">auth.GET(&quot;/ping&quot;, handler.Ping)</span><br></pre></td></tr></table></figure></div>

<p>auth被注册为一个路由组，该路由组有一个GET类型的路由<code>ping</code>，我们可以看到路由组被绑定了一个方法，该方法已经由库里边的代码实现，直接添加即可。</p>
<p>该方法用于校验token</p>
<p>路由组绑定了该方法则意为着访问：访问该路由组下的所有路由，必须携带token，否则无法访问</p>
<hr>
<p>该demo中有关JWT的部分基本为以上的内容，其中还有涉及到<code>Gorm</code>的操作，并不是本文主题，不再赘述</p>
]]></content>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
</search>
